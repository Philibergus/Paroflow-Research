// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
  id              String   @id @default(cuid())
  nom             String
  prenom          String
  email           String?
  telephone       String?
  dateNaissance   DateTime
  adresse         String?
  numeroSecurite  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  traitements     Traitement[]
  rendezVous      RendezVous[]
  chartesDentaires CharteDentaire[]
  documentsPatient DocumentPatient[]
  filesAttente    FileAttente[]
  
  @@map("patients")
}

model Correspondant {
  id        String   @id @default(cuid())
  nom       String
  specialite String
  email     String?
  telephone String?
  adresse   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("correspondants")
}

model Traitement {
  id                String   @id @default(cuid())
  patientId         String
  type              String   // orthodontie, implants, couronnes, etc.
  dents             String?  // numérotation des dents concernées
  statut            String   @default("planifie") // planifie, en_cours, termine, suspendu
  dateDebut         DateTime?
  dateFin           DateTime?
  cout              Float?
  notes             String?
  scenariotype      String?  // Type de scénario clinique (wisdom_extraction, periodontal_nonsurgical, etc.)
  scenarioEtapeCourante String? // ID de l'étape courante dans le scénario
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  patient           Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  etapes            EtapeTraitement[]
  chartesDentaires  CharteDentaire[]
  
  @@map("traitements")
}

model EtapeTraitement {
  id           String   @id @default(cuid())
  traitementId String
  titre        String
  description  String?
  date         DateTime
  statut       String   @default("planifie") // planifie, termine, reporte
  duree        Int?     // durée en minutes
  cout         Float?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  traitement   Traitement @relation(fields: [traitementId], references: [id], onDelete: Cascade)
  
  @@map("etapes_traitement")
}

model RendezVous {
  id           String   @id @default(cuid())
  patientId    String
  titre        String
  description  String?
  dateHeure    DateTime
  duree        Int      @default(30) // durée en minutes
  statut       String   @default("planifie") // planifie, confirme, annule, termine
  type         String   @default("consultation") // consultation, chirurgie, controle, urgence
  salle        String?  // salle de consultation
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("rendez_vous")
}

// Dental Chart Model - tracks dental status for each tooth
model CharteDentaire {
  id           String   @id @default(cuid())
  patientId    String
  traitementId String?
  numeroDent   Int      // Tooth number (18-28, 38-48, etc.)
  statut       String   // present, extracted, implant, crown, filling, etc.
  etat         String?  // healthy, caries, restoration, etc.
  notes        String?
  couleur      String?  // Color code for visualization
  dateModification DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  traitement   Traitement? @relation(fields: [traitementId], references: [id], onDelete: SetNull)
  
  @@unique([patientId, numeroDent])
  @@map("chartes_dentaires")
}

// Clinical Scenario Templates
model ScenarioType {
  id          String   @id @default(cuid())
  nom         String   @unique // wisdom_extraction, periodontal_nonsurgical, etc.
  titre       String   // Human-readable title
  description String?
  etapesTemplate Json  // JSON defining the steps and branching logic
  dureeEstimee Int?    // Estimated duration in days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("scenario_types")
}

// Patient Queue Management
model FileAttente {
  id          String   @id @default(cuid())
  patientId   String
  type        String   // periodontal, implant, followup, emergency
  priorite    Int      @default(1) // 1=low, 2=medium, 3=high, 4=urgent
  statut      String   @default("waiting") // waiting, in_progress, completed, cancelled
  notes       String?
  dateAjout   DateTime @default(now())
  dateDebut   DateTime?
  dateFin     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("files_attente")
}

// Document Management
model DocumentPatient {
  id          String   @id @default(cuid())
  patientId   String
  type        String   // report, estimate, xray, photo, correspondence
  titre       String
  description String?
  cheminFichier String // File path or URL
  mimeType    String?
  tailleFichier Int?   // File size in bytes
  dateDocument DateTime? // Date the document was created/taken
  tags        String?  // Comma-separated tags for search
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("documents_patients")
}
