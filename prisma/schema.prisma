// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
  id              String   @id @default(cuid())
  nom             String
  prenom          String
  email           String?
  telephone       String?
  dateNaissance   DateTime
  adresse         String?
  numeroSecurite  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  traitements     Traitement[]
  rendezVous      RendezVous[]
  chartesDentaires CharteDentaire[]
  documentsPatient DocumentPatient[]
  filesAttente    FileAttente[]
  implantUtilises ImplantUtilise[]
  composantsUtilises ComposantUtilise[]
  emailsRecus     EmailEnvoye[]
  
  @@map("patients")
}

model Correspondant {
  id        String   @id @default(cuid())
  nom       String
  specialite String
  email     String?
  telephone String?
  adresse   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("correspondants")
}

model Traitement {
  id                String   @id @default(cuid())
  patientId         String
  type              String   // orthodontie, implants, couronnes, etc.
  dents             String?  // numérotation des dents concernées
  statut            String   @default("planifie") // planifie, en_cours, termine, suspendu
  dateDebut         DateTime?
  dateFin           DateTime?
  cout              Float?
  notes             String?
  scenariotype      String?  // Type de scénario clinique (wisdom_extraction, periodontal_nonsurgical, etc.)
  scenarioEtapeCourante String? // ID de l'étape courante dans le scénario
  
  // Champs spécifiques implantologie
  implantsPlanifies Int?      // Nombre implants prévus
  implantsPoses     Int?      // Nombre implants posés
  typeImplantologie String?   // "Unitaire", "Multiple", "All-on-4", "All-on-6"
  guidageChirurgical Boolean? // Chirurgie guidée ou non
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  patient           Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  etapes            EtapeTraitement[]
  chartesDentaires  CharteDentaire[]
  implantUtilises   ImplantUtilise[]
  composantsUtilises ComposantUtilise[]
  
  @@map("traitements")
}

model EtapeTraitement {
  id           String   @id @default(cuid())
  traitementId String
  titre        String
  description  String?
  date         DateTime
  statut       String   @default("planifie") // planifie, termine, reporte
  duree        Int?     // durée en minutes
  cout         Float?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  traitement   Traitement @relation(fields: [traitementId], references: [id], onDelete: Cascade)
  
  @@map("etapes_traitement")
}

model RendezVous {
  id           String   @id @default(cuid())
  patientId    String
  titre        String
  description  String?
  dateHeure    DateTime
  duree        Int      @default(30) // durée en minutes
  statut       String   @default("planifie") // planifie, confirme, annule, termine
  type         String   @default("consultation") // consultation, chirurgie, controle, urgence
  salle        String?  // salle de consultation
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("rendez_vous")
}

// Dental Chart Model - tracks dental status for each tooth
model CharteDentaire {
  id           String   @id @default(cuid())
  patientId    String
  traitementId String?
  numeroDent   Int      // Tooth number (18-28, 38-48, etc.)
  statut       String   // present, extracted, implant, crown, filling, etc.
  etat         String?  // healthy, caries, restoration, etc.
  notes        String?
  couleur      String?  // Color code for visualization
  dateModification DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  patient      Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  traitement   Traitement? @relation(fields: [traitementId], references: [id], onDelete: SetNull)
  
  @@unique([patientId, numeroDent])
  @@map("chartes_dentaires")
}

// Clinical Scenario Templates
model ScenarioType {
  id          String   @id @default(cuid())
  nom         String   @unique // wisdom_extraction, periodontal_nonsurgical, etc.
  titre       String   // Human-readable title
  description String?
  etapesTemplate Json  // JSON defining the steps and branching logic
  dureeEstimee Int?    // Estimated duration in days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("scenario_types")
}

// Patient Queue Management
model FileAttente {
  id          String   @id @default(cuid())
  patientId   String
  type        String   // periodontal, implant, followup, emergency
  priorite    Int      @default(1) // 1=low, 2=medium, 3=high, 4=urgent
  statut      String   @default("waiting") // waiting, in_progress, completed, cancelled
  notes       String?
  dateAjout   DateTime @default(now())
  dateDebut   DateTime?
  dateFin     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("files_attente")
}

// Document Management
model DocumentPatient {
  id          String   @id @default(cuid())
  patientId   String
  type        String   // report, estimate, xray, photo, correspondence
  titre       String
  description String?
  cheminFichier String // File path or URL
  mimeType    String?
  tailleFichier Int?   // File size in bytes
  dateDocument DateTime? // Date the document was created/taken
  tags        String?  // Comma-separated tags for search
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("documents_patients")
}

// ============================================================================
// MODULE IMPLANTS DENTAIRES
// ============================================================================

// Fabricants d'implants (Nobel, Straumann, BioHorizons)
model MarqueImplant {
  id          String   @id @default(cuid())
  nom         String   @unique // "Nobel Biocare", "Straumann", "BioHorizons"
  codeMarque  String   @unique // "NOBEL", "STRAUMANN", "BIOHORIZONS"
  pays        String?  // "Suède", "Suisse", "USA"
  siteWeb     String?
  telephone   String?
  email       String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  systemes    SystemeImplant[]
  
  @@map("marques_implants")
}

// Systèmes d'implants par marque (NobelActive, BLT, Tapered Internal)
model SystemeImplant {
  id                     String   @id @default(cuid())
  marqueId               String
  nom                    String   // "NobelActive", "BLT", "Tapered Internal"
  codeSysteme            String   // "NA", "BLT", "TLX"
  description            String?
  typeConnexion          String?  // "Hexagone+Morse", "CrossFit", "Interne Hex"
  surface                String?  // "TiUnite", "SLActive", "RBT+Laser-Lok"
  materiau               String?  // "Ti Grade 4", "Roxolid", "Ti-6Al-4V"
  indicationsPrincipales String?  // "Immédiat", "Esthétique", "Universel"
  dateIntroduction       DateTime?
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  marque                 MarqueImplant @relation(fields: [marqueId], references: [id], onDelete: Cascade)
  references             ReferenceImplant[]
  composants             ComposantProsthetique[]
  
  @@unique([marqueId, codeSysteme])
  @@map("systemes_implants")
}

// Références spécifiques avec diamètre/longueur
model ReferenceImplant {
  id                     String   @id @default(cuid())
  systemeId              String
  codeReference          String   @unique // "NA-4.3-10", "BLT-41-10", "TLX4610"
  diametre               Float    // 3.5, 4.1, 4.6, etc. (en mm)
  longueur               Float    // 8.0, 10.0, 10.5, etc. (en mm)
  plateformeProsthetique String?  // "NP", "RP", "WP", "3.0", "4.5", etc.
  connexionDiametre      Float?   // Diamètre connexion prothétique
  couleurCoding          String?  // Code couleur fabricant
  prixUnitaire           Float?   // Prix d'achat unitaire
  notes                  String?
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  systeme                SystemeImplant @relation(fields: [systemeId], references: [id], onDelete: Cascade)
  stock                  StockImplant?
  implantUtilises        ImplantUtilise[]
  
  @@map("references_implants")
}

// Gestion des quantités et alertes stock
model StockImplant {
  id                   String   @id @default(cuid())
  referenceId          String   @unique
  quantiteStock        Int      @default(0)
  seuilAlerte          Int      @default(2)   // Alerte si stock < seuil
  quantiteCommande     Int      @default(5)   // Quantité standard commande
  emplacement          String?  // "Armoire A-1", "Tiroir 3", etc.
  datePeremption       DateTime? // Si applicable
  lotFournisseur       String?
  fournisseurPrincipal String?  // "Henry Schein", "GACD", etc.
  prixDernierAchat     Float?
  dateDernierAchat     DateTime?
  dateInventaire       DateTime?
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  reference            ReferenceImplant @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  mouvements           MouvementStock[]
  
  @@map("stock_implants")
}

// Historique des mouvements de stock
model MouvementStock {
  id                 String   @id @default(cuid())
  stockId            String
  type               String   // "ENTREE", "SORTIE", "INVENTAIRE", "CORRECTION"
  quantite           Int      // Positif pour entrée, négatif pour sortie
  quantiteAvant      Int      // Stock avant mouvement
  quantiteApres      Int      // Stock après mouvement
  motif              String   // "Achat", "Utilisation", "Périmé", "Perdu"
  referenceDocument  String?  // Bon commande, facture, etc.
  utilisateurId      String?  // Qui a fait le mouvement
  notes              String?
  dateMovement       DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  stock              StockImplant @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@map("mouvements_stock")
}

// Implants utilisés sur patients (traçabilité complète)
model ImplantUtilise {
  id                 String   @id @default(cuid())
  patientId          String
  traitementId       String?
  referenceId        String
  numeroDent         Int      // Position FDI (11, 21, 36, etc.)
  dateChirurgie      DateTime
  chirurgien         String?  // Nom praticien
  torqueInsertion    Float?   // Couple d'insertion en Ncm
  stabiliteInitiale  String?  // "Excellente", "Bonne", "Moyenne"
  techniqueChirurgie String?  // "Conventionnelle", "Guidée", "Immédiate"
  greffesAssociees   String?  // "ROG", "Sinus lift", "Greffe bloc", etc.
  notes              String?
  statut             String   @default("POSE") // "POSE", "ECHEC", "RETRAIT"
  dateStatut         DateTime?
  numeroLot          String?  // Lot fabricant pour traçabilité
  isSuccess          Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  patient            Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  traitement         Traitement? @relation(fields: [traitementId], references: [id], onDelete: SetNull)
  reference          ReferenceImplant @relation(fields: [referenceId], references: [id], onDelete: Restrict)
  suivis             SuiviImplant[]
  composantsUtilises ComposantUtilise[]
  
  @@map("implants_utilises")
}

// Suivi post-opératoire des implants
model SuiviImplant {
  id               String   @id @default(cuid())
  implantUtiliseId String
  dateVisite       DateTime
  typeVisite       String   // "J+7", "1 mois", "3 mois", "6 mois", "1 an"
  cicatrisation    String?  // "Excellente", "Bonne", "Retardée", "Problème"
  douleur          Int?     // 0-10 échelle
  oedeme           String?  // "Absent", "Léger", "Modéré", "Important"
  mobilite         String?  // "Nulle", "Légère", "Importante"
  radiographie     Boolean? // Radio prise?
  prescription     String?  // Médicaments prescrits
  prochaineVisite  DateTime?
  notes            String?
  praticien        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  implantUtilise   ImplantUtilise @relation(fields: [implantUtiliseId], references: [id], onDelete: Cascade)
  
  @@map("suivis_implants")
}

// ============================================================================
// COMPOSANTS PROTHÉTIQUES IMPLANTAIRES
// ============================================================================

// Types de composants prothétiques (vis cicatrisation, piliers, etc.)
model TypeComposant {
  id          String   @id @default(cuid())
  nom         String   @unique // "Vis de cicatrisation", "Pilier droit", "Transfert empreinte", etc.
  categorie   String   // "CICATRISATION", "PILIER", "EMPREINTE", "VISSERIE", "ACCESSOIRE"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  composants  ComposantProsthetique[]
  
  @@map("types_composants")
}

// Composants prothétiques avec codes de commande précis
model ComposantProsthetique {
  id                String   @id @default(cuid())
  systemeId         String   // Lié au système d'implant (BLT, NobelActive, Kontact, etc.)
  typeComposantId   String   // Type de composant
  codeCommande      String   @unique // Code exact fournisseur "024.4100", "KPAZ501", etc.
  nom               String   // "Vis cicatrisation H3mm Ø4.5", "Pilier droit 15°", etc.
  description       String?
  
  // Spécifications techniques
  materiau          String?  // "Ti Grade 4", "Zircone", "PEEK", etc.
  dimensions        String?  // "H3mm Ø4.5", "15° L8mm", etc.
  couleur           String?  // Code couleur si applicable
  
  // Compatibilité implant
  diametresCompatibles String? // "3.5,4.3,5.0" ou "ALL" pour universel
  plateformesCompatibles String? // "NP,RP,WP" ou "ALL"
  
  // Informations commerciales
  prixUnitaire      Float?   // Prix d'achat
  fournisseurPrincipal String? // "Nobel Biocare", "Henry Schein", etc.
  delaiLivraison    Int?     // Jours
  
  // Spécifications cliniques
  coupleSerrage     Float?   // N.cm recommandé
  hauteurGencive    Float?   // mm si applicable
  angulation        Float?   // Degrés si pilier angulé
  
  notes             String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  systeme           SystemeImplant @relation(fields: [systemeId], references: [id], onDelete: Cascade)
  typeComposant     TypeComposant @relation(fields: [typeComposantId], references: [id], onDelete: Cascade)
  stock             StockComposant?
  utilisations      ComposantUtilise[]
  
  @@map("composants_prosthetiques")
}

// Gestion stock des composants prothétiques
model StockComposant {
  id                   String   @id @default(cuid())
  composantId          String   @unique
  quantiteStock        Int      @default(0)
  seuilAlerte          Int      @default(2)
  quantiteCommande     Int      @default(5)
  emplacement          String?  // "Tiroir A-3", "Armoire Prothèse", etc.
  datePeremption       DateTime? // Si applicable
  lotFournisseur       String?
  prixDernierAchat     Float?
  dateDernierAchat     DateTime?
  dateInventaire       DateTime?
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  composant            ComposantProsthetique @relation(fields: [composantId], references: [id], onDelete: Cascade)
  mouvements           MouvementStockComposant[]
  
  @@map("stock_composants")
}

// Mouvements de stock composants
model MouvementStockComposant {
  id                 String   @id @default(cuid())
  stockId            String
  type               String   // "ENTREE", "SORTIE", "INVENTAIRE", "CORRECTION"
  quantite           Int      // Positif pour entrée, négatif pour sortie
  quantiteAvant      Int      // Stock avant mouvement
  quantiteApres      Int      // Stock après mouvement
  motif              String   // "Achat", "Utilisation", "Périmé", "Perdu"
  referenceDocument  String?  // Bon commande, facture, etc.
  utilisateurId      String?  // Qui a fait le mouvement
  notes              String?
  dateMovement       DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  stock              StockComposant @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@map("mouvements_stock_composants")
}

// Composants utilisés sur patients (traçabilité)
model ComposantUtilise {
  id               String   @id @default(cuid())
  patientId        String
  implantUtiliseId String?  // Si lié à un implant spécifique
  traitementId     String?  // Si lié à un traitement
  composantId      String
  dateUtilisation  DateTime
  etapeTraitement  String   // "Pose implant", "Cicatrisation", "Empreinte", "Pose prothèse"
  quantiteUtilisee Int      @default(1)
  notes            String?
  praticien        String?
  isSuccess        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  patient          Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  implantUtilise   ImplantUtilise? @relation(fields: [implantUtiliseId], references: [id], onDelete: SetNull)
  traitement       Traitement? @relation(fields: [traitementId], references: [id], onDelete: SetNull)
  composant        ComposantProsthetique @relation(fields: [composantId], references: [id], onDelete: Restrict)
  
  @@map("composants_utilises")
}

// ============================================================================
// CONFIGURATION EMAIL
// ============================================================================

// Configuration des comptes email pour l'envoi
model ConfigurationEmail {
  id                  String   @id @default(cuid())
  nom                 String   // "Cabinet Principal", "Dr. Martin", etc.
  email               String   @unique
  provider            String   @default("gmail") // gmail, outlook, custom
  
  // Configuration OAuth2 (sécurisée)
  clientId            String?
  clientSecretHash    String?  // Hash du secret, jamais en clair
  refreshToken        String?  // Token de rafraîchissement chiffré
  accessToken         String?  // Token d'accès temporaire
  tokenExpiry         DateTime?
  
  // Configuration SMTP alternative (si pas OAuth)
  smtpHost            String?
  smtpPort            Int?
  smtpSecure          Boolean? @default(true)
  smtpUsername        String?
  smtpPasswordHash    String?  // Mot de passe chiffré
  
  // Paramètres d'envoi
  signatureHtml       String?  // Signature HTML
  isActive            Boolean  @default(true)
  isDefault           Boolean  @default(false) // Compte par défaut
  
  // Limites d'envoi
  limitParJour        Int?     @default(100)
  limitParHeure       Int?     @default(20)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  emailsEnvoyes       EmailEnvoye[]
  
  @@map("configurations_email")
}

// Templates d'emails réutilisables
model TemplateEmail {
  id             String   @id @default(cuid())
  nom            String   @unique // "rappel_rdv", "ordonnance", "compte_rendu"
  titre          String   // "Rappel de rendez-vous"
  objet          String   // "Rappel: RDV {{date}} à {{heure}}"
  contenuHtml    String   // Template HTML avec variables {{}}
  contenuTexte   String?  // Version texte
  variables      String   // JSON des variables disponibles
  
  // Catégorisation
  categorie      String   // "rappel", "medical", "administratif"
  description    String?
  
  isActive       Boolean  @default(true)
  isSysteme      Boolean  @default(false) // Template système (non supprimable)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  emailsEnvoyes  EmailEnvoye[]
  
  @@map("templates_email")
}

// Historique des emails envoyés
model EmailEnvoye {
  id                    String   @id @default(cuid())
  configurationEmailId  String
  templateEmailId       String?
  patientId             String?  // Si email lié à un patient
  
  // Contenu de l'email
  destinataire          String   // Email du destinataire
  objet                 String
  contenuHtml          String?
  contenuTexte         String?
  
  // Métadonnées d'envoi
  statut               String   @default("pending") // pending, sent, failed, bounced
  dateEnvoi            DateTime?
  dateOuverture        DateTime?
  dateClic             DateTime?
  messageErreur        String?
  
  // Informations techniques
  messageId            String?  // ID du message email
  providerId           String?  // ID chez le provider (Gmail, etc.)
  
  // Contexte
  typeEnvoi            String   // "manuel", "automatique", "rappel"
  declencheur          String?  // Ce qui a déclenché l'envoi
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  configurationEmail   ConfigurationEmail @relation(fields: [configurationEmailId], references: [id], onDelete: Cascade)
  templateEmail        TemplateEmail? @relation(fields: [templateEmailId], references: [id], onDelete: SetNull)
  patient              Patient? @relation(fields: [patientId], references: [id], onDelete: SetNull)
  
  @@map("emails_envoyes")
}
