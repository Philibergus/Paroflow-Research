import { test, expect, Page } from '@playwright/test';

// Syst√®me de capture des logs int√©gr√© aux tests
class TestLogger {
  private logs: Array<{timestamp: string, type: string, message: string}> = [];
  
  captureConsoleLogs(page: Page) {
    page.on('console', msg => {
      const logEntry = {
        timestamp: new Date().toISOString(),
        type: msg.type(),
        message: msg.text()
      };
      this.logs.push(logEntry);
      
      // Afficher les erreurs imm√©diatement
      if (msg.type() === 'error') {
        console.error(`üî¥ Console Error: ${msg.text()}`);
      }
    });

    page.on('pageerror', error => {
      const errorEntry = {
        timestamp: new Date().toISOString(),
        type: 'pageerror',
        message: `${error.message}\n${error.stack}`
      };
      this.logs.push(errorEntry);
      console.error(`‚ùå Page Error: ${error.message}`);
    });
  }

  getErrors() {
    return this.logs.filter(log => log.type === 'error' || log.type === 'pageerror');
  }

  getAllLogs() {
    return this.logs;
  }
}

test.describe('Paroflow Core Functionality', () => {
  let logger: TestLogger;

  test.beforeEach(async ({ page }) => {
    logger = new TestLogger();
    logger.captureConsoleLogs(page);
    await page.goto('/');
  });

  test('Application loads without JavaScript errors', async ({ page }) => {
    // Attendre que l'app se charge compl√®tement
    await expect(page.locator('body')).toBeVisible();
    await page.waitForTimeout(3000); // Laisser le temps aux composants de se monter
    
    // V√©rifier qu'il n'y a pas d'erreurs JavaScript
    const errors = logger.getErrors();
    
    if (errors.length > 0) {
      console.log('üìã Erreurs d√©tect√©es:');
      errors.forEach((error, index) => {
        console.log(`${index + 1}. [${error.type}] ${error.message}`);
      });
    }
    
    expect(errors.length).toBe(0);
  });

  test('All main pages render correctly', async ({ page }) => {
    const pages = [
      { path: '/', titleSelector: 'main h1:has-text("Cabinet Dentaire")' },
      { path: '/patients', titleSelector: 'main h1:has-text("Patients")' },
      { path: '/correspondants', titleSelector: 'main h1:has-text("Correspondants")' },
      { path: '/implants', titleSelector: 'main h1:has-text("Gestion des Implants")' },
      { path: '/todo', titleSelector: 'main h1:has-text("T√¢ches et Rappels")' }
    ];

    for (const testPage of pages) {
      await page.goto(testPage.path);
      
      // V√©rifier que la page se charge avec s√©lecteur sp√©cifique
      await expect(page.locator(testPage.titleSelector)).toBeVisible();
      
      // V√©rifier qu'il n'y a pas d'erreurs sur cette page
      await page.waitForTimeout(2000);
      const pageErrors = logger.getErrors();
      
      if (pageErrors.length > 0) {
        console.log(`‚ùå Erreurs sur ${testPage.path}:`);
        pageErrors.forEach(error => console.log(`  - ${error.message}`));
      }
      
      expect(pageErrors.length).toBe(0);
    }
  });

  test('Navigation works without errors', async ({ page }) => {
    // Test de navigation via la sidebar - UX r√©volutionnaire avec fusion Dashboard/Dental
    const navItems = ['Patients', 'Implants', 'Correspondants', 'T√¢ches'];
    
    for (const item of navItems) {
      await page.click(`text=${item}`);
      await page.waitForTimeout(1000);
      
      // V√©rifier que la navigation a fonctionn√©
      await expect(page.locator('main')).toBeVisible();
    }
    
    // Pas d'erreurs pendant la navigation
    const navErrors = logger.getErrors();
    expect(navErrors.length).toBe(0);
  });

  test('Components render with proper error boundaries', async ({ page }) => {
    await page.goto('/');
    
    // V√©rifier que les composants principaux du dashboard r√©volutionnaire sont pr√©sents
    await expect(page.locator('main h1:has-text("Cabinet Dentaire")')).toBeVisible();
    
    // Tester la nouvelle interface r√©volutionnaire avec onglets
    await expect(page.locator('[role="tab"]:has-text("Vue d\'ensemble")')).toBeVisible();
    await expect(page.locator('[role="tab"]:has-text("File d\'attente")')).toBeVisible();
    await expect(page.locator('[role="tab"]:has-text("Traitements")')).toBeVisible();
    
    // Si des composants ne se chargent pas, les logs le r√©v√©leront
    const componentErrors = logger.getErrors();
    expect(componentErrors.length).toBe(0);
  });

  test('Revolutionary waiting list features work correctly', async ({ page }) => {
    await page.goto('/');
    
    // Naviguer vers l'onglet file d'attente
    await page.click('text=File d\'attente');
    await page.waitForTimeout(1000);
    
    // V√©rifier que la liste d'attente r√©volutionnaire se charge
    await expect(page.locator('text=File d\'Attente')).toBeVisible();
    
    // Tester les s√©lecteurs de vue r√©volutionnaires
    await expect(page.locator('text=Cartes')).toBeVisible();
    await expect(page.locator('text=Compact')).toBeVisible();
    await expect(page.locator('text=Timeline')).toBeVisible();
    
    // Tester le changement de vue
    await page.click('text=Compact');
    await page.waitForTimeout(500);
    await page.click('text=Timeline');
    await page.waitForTimeout(500);
    await page.click('text=Cartes');
    
    // V√©rifier que les stats dynamiques sont pr√©sentes
    await expect(page.locator('text=En attente')).toBeVisible();
    await expect(page.locator('text=En cours')).toBeVisible();
    await expect(page.locator('text=Urgences')).toBeVisible();
    
    // V√©rifier que la recherche r√©volutionnaire fonctionne
    const searchInput = page.locator('input[placeholder*="Recherche rapide"]');
    await expect(searchInput).toBeVisible();
    
    // Pas d'erreurs dans la file d'attente r√©volutionnaire
    const queueErrors = logger.getErrors();
    expect(queueErrors.length).toBe(0);
  });

  test('Todo auto-focus functionality works', async ({ page }) => {
    await page.goto('/todo');
    
    // V√©rifier que la page T√¢ches se charge avec s√©lecteur sp√©cifique
    await expect(page.locator('main h1:has-text("T√¢ches et Rappels")')).toBeVisible();
    
    // Cliquer sur "Nouvelle t√¢che" 
    await page.click('text=Nouvelle t√¢che');
    await page.waitForTimeout(500);
    
    // V√©rifier que le formulaire s'ouvre et que le champ titre a le focus
    await expect(page.locator('input[placeholder="Titre de la t√¢che"]')).toBeVisible();
    
    // Pas d'erreurs dans la fonctionnalit√© auto-focus
    const todoErrors = logger.getErrors();
    expect(todoErrors.length).toBe(0);
  });

  test('Implant management with stock controls works', async ({ page }) => {
    await page.goto('/implants');
    
    // V√©rifier que la gestion des implants se charge
    await expect(page.locator('text=Gestion des Implants')).toBeVisible();
    
    // Tester les onglets
    await expect(page.locator('text=S√©lecteur d\'Implant')).toBeVisible();
    await expect(page.locator('text=Gestion Stock')).toBeVisible();
    
    // Naviguer vers la gestion stock pour tester les boutons +/-
    await page.click('text=Gestion Stock');
    await page.waitForTimeout(1000);
    
    // V√©rifier que les contr√¥les de stock sont pr√©sents
    await expect(page.locator('text=√âtat du Stock')).toBeVisible();
    
    // Pas d'erreurs dans la gestion des implants
    const implantErrors = logger.getErrors();
    expect(implantErrors.length).toBe(0);
  });

  test.afterEach(async () => {
    // Sauvegarder tous les logs pour analyse par Claude
    const allLogs = logger.getAllLogs();
    if (allLogs.length > 0) {
      console.log(`üìä Session logs: ${allLogs.length} entr√©es`);
      
      // Sauvegarder dans un fichier que Claude peut lire
      const fs = require('fs');
      const logsPath = './tests/logs/latest-test-session.json';
      fs.mkdirSync('./tests/logs', { recursive: true });
      fs.writeFileSync(logsPath, JSON.stringify({
        timestamp: new Date().toISOString(),
        logs: allLogs
      }, null, 2));
    }
  });
});